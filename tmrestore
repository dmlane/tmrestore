#!/usr/bin/env bash

: << DOCXX
------------------------------------------------------------------------------
# tmrestore
# =========
#   Description: Restore project settings from Time Machine backup. 
#         Usage: tmrestore [options] backup_volume
#    Parameters: [-f] Force the staging directory to be overwritten
#   
	This script will allow you to choose a backupset from the backup_volume.
	
	We rely on mackup as a source of configuration locations. By all means, 
	use mackup in conjunction with this script.

DOCXX
#------------------------------------------------------------------------------


# Following is set by HomeBrew on install
. $(perl -MCwd -e 'print Cwd::abs_path shift' "$0" |sed 's?/[^/]*$??')/common.env

XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-${HOME}/.config}
CONFIG_DIR=${XDG_CONFIG_HOME}/net.dmlane.tmrestore
STAGING_DIR=/tmp/.tmrestore.stage

function initialise_config {
	# Initialise config directory and seed with a config to restore other configs
	mkdir $CONFIG_DIR
	>${CONFIG_DIR}/tmrestore.cfg <<EOF
[application]
name = tmrestore

[configuration_files]

[xdb_configuration_files]
net.dmlane.tmrestore
EOF
}

function choose_backup {

	# If '-f' was given as an option
	[ $replace_restore ] && rm -rf ${STAGING_DIR}

	# Either a disk must be provided *or* a restore must be in staging area
	if [ ! "$tm_disk" ] ; then
		# Check for an existing restore
		[ -d ${STAGING_DIR} ] && return 1
		fail "You must provide a TimeMachine disk"
	fi
	select tm_backupset in $(tmutil listbackups -d $tm_disk -m 2>/dev/null)
	do
		[ $tm_backupset ] && break
	done
	[ ! $tm_backupset ] && fail "No backupsets found on $tm_disk"
	BACKUP_PATH=$(find $tm_backupset -name $USER -type d -maxdepth 4 2>/dev/null|grep "${HOME}\$")
	[ ! "$BACKUP_PATH" ] && fail "Couldn't find '$HOME' in backupset"
	if [ $(wc -l <<<"$BACKUP_PATH") -gt 1 ] ; then
		highlight "There are >1 backup locations found in this backup set - ^Please choose 1^"
		IFS=$'\n'
		select choice in $BACKUP_PATH
		do
			[ $choice ] && break
		done
		[ ! $choice ] && fail "No choice made"
		BACKUP_PATH=$choice
	fi
	BACKUP_PATH=${BACKUP_PATH%$HOME}
	highlight "BACKUP_PATH=^$BACKUP_PATH^"
	return 0
}
function get_config {
	# Get content of cfg file into variables
	# $1 = full path to cfg file
    export APP=$(crudini --get $1  application name)
    # Files relative to $HOME
    export FILES=$(crudini --get $1 configuration_files 2>/dev/null)
    # Files relative to (normally)  $HOME/.config
    export XDG_FILES=$(crudini --get $1 xdb_configuration_files 2>/dev/null)
}

while getopts "f" opt
do
    case $opt in
        f) replace_restore=Y ;;
    esac
done
shift  $((OPTIND-1))

[ $# -gt 1 ] && fail "Expected to find 1 parameter only"
tm_disk="$1"

# Initialise config directory if a new installation
[ ! -d $CONFIG_DIR ] && initialise_config

if choose_backup ; then
	highlight "^$tm_backupset^ chosen ($BACKUP_PATH) +++++++++++"  
	rm -rf $STAGING_DIR
	process_all_configs restore_to_stage
else
	highlight "Using ^existing^ restore staging area"
fi
exit
